## 1. **Task/Problem Description**


Briefly describe the problem you're trying to solve or the task you're working on.


Example:
> I need to write a program that sorts a list of integers in ascending order.


---


## 2. **Initial Approach/Code**


Describe the initial approach you took to solving the problem. If you started writing code, include it here.


```python
# Example: Initial sorting function
def sort_numbers(numbers):
    return sorted(numbers)
```


- What was your plan for solving the problem?
- Did you have any initial thoughts or strategies before using ChatGPT?


---


## 3. **Interaction with ChatGPT**


### Questions/Requests to ChatGPT
Write down the questions or requests you made to ChatGPT.
Also include what code from ChatGPT you are unsure of and craft a question that asks for further clarification.
 For example:


- "How do I reverse a list in Python?"
- "Can you suggest a more efficient way to sort a list?"
- Why did ChatGPT opt for create element when my teacher suggested insertAdjacentHTML?


```text
# Example prompt to ChatGPT:
How can I optimize this sorting function for large datasets?
```


---


## 4. **ChatGPT's Suggestions/Code Changes**


Record the code or suggestions ChatGPT provided. Include any changes or improvements ChatGPT suggested and how it influenced your approach.


```python
# ChatGPT suggested using a custom sorting algorithm to improve efficiency
def optimized_sort(numbers):
    # Implementation of a more efficient sorting algorithm
    pass
```


- What was ChatGPT's solution or suggestion?
- How did it differ from your original approach?


—
12/12/24 - Used ChatGPT to brainstorm how the logic of the Roulette code will work.


12/17/24 - Used ChatGPT to generate lists for the numbers in roulette:
    red_num = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]
    black_num = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36]
    green_num = [37,38]
    first_twelve = [1,2,3,4,5,6,7,8,9,10,11,12]
    second_twelve = [13,14,15,16,17,18,19,20,21,22,23,24]
    third_twelve = [25,26,27,28,29,30,31,32,33,34,35,36]


12/17/24 -
	Input:
		while True:
                bet_amount_input = int(input("How much $ would you like to bet?\n"))


                if bet_amount_input <= roulette.money:
                    break
                elif bet_amount_input > roulette.money:
                    print("You do not have enough $")
                else:
                    print("Invalid Bet.")
	Output:
	while True:
    		try:
        		bet_amount_input = int(input("How much $ would you like to bet?\n"))
        
        		if bet_amount_input <= roulette.money:
            		break
        		elif bet_amount_input > roulette.money:
            		print("You do not have enough $")
        		else:
            		print("Invalid Bet.")
    			except ValueError:
        			print("Invalid input. Please enter a valid number.")


ChatGPT created error handling using try: and except ValueError: making it so if the input was not a number it would print the input is invalid.


1/4/25 - 
Original Code:
	      exit_input = input("Would you like to continue. (y/n)\n").lower()
            if exit_input == "y":
                print("Continuing.")
            if exit_input == "n":
                print("Exiting.")
                Break




1/5/25 - Used ChatGPT to create error handling within the function used to ask the user if they would like to continue playing. Applied this idea to both roulette code and snail racing. 


    def continue_input(self):
        while True:
            if self.money == 0:
                print("Unable to continue, You have gone bankrupt.")
                time.sleep(1.5)
                return False
            self.clear()
            self.display_map()
            again_input = input("Would you like to continue? (y/n)\n").lower()
            if again_input == "y" or again_input == "n":
                break
            else:
                print("Invalid input.")
                time.sleep(.5)
                
        if again_input == "y":
            print("Continuing")
            time.sleep(.5)
            return True
        elif again_input == "n":
            print("Exiting.")
            time.sleep(.5)
            return False


It made the continue input first check if the input was either “y” or “n” (if not it would ask for the input again) and then break the while loop and check which of the two it was returning either True or False while the main code depended on this within its while loop.


1/11/25 - Wanted to add a border around the snail racing game, but could not figure it out. It gave me this code to display the map, after I had asked it to create characters to fit the corners.
        print(self.top_left + self.horizontal_border + self.top_right)
        welcome_line = "Welcome to Snail Racing!"
        print("| " + welcome_line.ljust(self.cols + 4) + "|")
        money_line = f"You have $ {self.money}"
        print("| " + money_line.ljust(self.cols + 4) + "|")
        print("|" + " " * (self.cols + 5) + "|")
   
        for row in self.map:
            print("| " + "".join(row).ljust(self.cols) + " |")
   
        print("|" + " " * (self.cols + 5) + "|")
   
        print(self.bottom_left + self.horizontal_border + self.bottom_right)
I had changed the code and simply inserted the characters wherever it said “self.bottom_left” etc. instead of what ChatGPT had.


1/13/25 - Used chatGPT to help separate the main Roulette function into many separate functions. (It also helped to organize both the main function and the new separate functions)


1/13/25 - Used chatGPT to replace every “Roulette” with “roulette”


1/13/25 - Asked chatGPT what @staticmethod does
